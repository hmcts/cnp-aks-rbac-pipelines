# Docs:
# https://aka.ms/yaml

trigger:
  - master
variables:
  serviceConnection: azurerm-nonprod
  keyvaultName: infra-vault-nonprod
  terraformVersion: 0.12.5
  agentPool: 'Ubuntu-16.04'

stages:
  - stage: CI
    jobs:
      - job: Validate
        pool:
          vmImage: ${{ variables.agentPool }}
        steps:
          - task: Bash@3
            displayName: "Set build number"
            inputs:
              filePath: 'ci/set-build-pipeline-name.sh'
          - task: PowerShell@2
            displayName: 'Run tests'
            inputs:
              targetType: 'inline'
              script: |
                Install-Module -Name Pester -Force -Verbose -Scope CurrentUser
                Invoke-Pester ./ci -OutputFormat NUnitXml -OutputFile ./TEST-CI.xml -EnableExit
              failOnStderr: true
              pwsh: true
          - task: AzureKeyVault@1
            displayName: 'Get azure devops API token from Keyvault'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              azureSubscription: ${{ variables.serviceConnection }}
              keyVaultName: ${{ variables.keyvaultName }}
              secretsFilter: 'azure-devops-token'

          - task: Bash@3
            displayName: "Update or Create Variable Groups"
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              filePath: 'variablegroups/scripts/update-variable-groups.sh'
              arguments: '$(azure-devops-token)'
              workingDirectory: 'variablegroups/'

          - task: PublishTestResults@2
            displayName: 'Publish Test Results **/TEST-*.xml'
            inputs:
              testResultsFormat: NUnit
              failTaskOnFailedTests: true
            condition: always()

          - task: TerraformInstaller@0
            inputs:
              terraformVersion: ${{ variables.terraformVersion }}

          - template: devops-templates/terraform-plan-template.yaml
            parameters:
              environment: 'sbox'
              resource_key: 'appgw'

          - task: CopyFiles@2
            displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
            inputs:
              Contents: |
               deployments/**
               roles/**
               scripts/**
               templates/**
               tests/**
               terraform/**
               team-config/**
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: drop'
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  - stage: Sandbox
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - template: devops-templates/terraform-apply-template.yaml
        parameters:
          environment: 'sbox'
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}
