{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "aksName": {
            "type": "string",
            "metadata": {
                "description": "Name of target AKS cluster."
            }
        },
        "isEnabled": {
            "type": "string",
            "defaultValue": "true",
            "metadata": {
                "description": "Specifies whether the alert is enabled"
            }
        },
        "infraResourceGroup": {
            "type": "string",
            "metadata": {
                "description": "Infra Resource Group"
            }
        },
        "actionGroupName": {
            "type": "string",
            "metadata": {
                "description": "Action Group for AKS alerts"
            }
        },
        "environmentName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Environment"
            }
        },
        "branch": {
            "type": "string",
            "defaultValue": "Unknown",
            "metadata": {
                "description": "source branch"
            }
        },
        "managedBy": {
            "type": "string"
          },
          "solutionOwner": {
            "type": "string"
          },
          "activityName": {
            "type": "string"
          },
          "dataClassification": {
            "type": "string"
          },
          "automation": {
            "type": "string"
          },
          "costCentre": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "criticality": {
            "type": "string"
          }
    },
    "variables": {
        "unhealthyPodsQuery": " KubePodInventory\n| where ContainerStatusReason in ('ImagePullBackOff', 'ErrImagePull', 'CreateContainerConfigError', 'CrashLoopBackOff', 'Error')\n| distinct ControllerName, Namespace\n| order by Namespace",
        "autoscalarAddInstancesQuery": "AzureDiagnostics\n| where Category == \"cluster-autoscaler\" and log_s matches regex \"Scale-up:\"\n| order by TimeGenerated\n| project TimeGenerated",
        "autoscalarDeletingInstancesQuery": "AzureDiagnostics\n| where Category == \"cluster-autoscaler\" and log_s matches regex \"Deleting vmss instances\"\n| order by TimeGenerated\n| project TimeGenerated",
        "highCPUQuery": "Perf\n | where ObjectName == 'K8SNode'\n | where CounterName == 'cpuCapacityNanoCores'\n | summarize LimitValue = max(CounterValue) by Computer, CounterName\n | project Computer, LimitValue\n| join kind=inner\n hint.strategy=shuffle ( Perf\n | where ObjectName == 'K8SNode'\n | where CounterName == 'cpuUsageNanoCores'\n | project Computer, UsageValue = CounterValue\n)\non Computer\n| project Computer, UsagePercent = UsageValue * 100.0 / LimitValue\n| where UsagePercent > 95\n| summarize AggregatedValue = toint(avg(UsagePercent)) by Computer",
        "lowRAMQuery": "Perf\n | where ObjectName == 'K8SNode'\n | where CounterName == 'memoryCapacityBytes'\n  | summarize LimitValue = max(CounterValue) by Computer, CounterName\n | project Computer, LimitValue\n| join kind=inner\n hint.strategy=shuffle ( Perf\n | where ObjectName == 'K8SNode'\n | where CounterName == 'memoryRssBytes'\n    | project Computer, UsageValue = CounterValue\n)\non Computer\n| project Computer, UsagePercent = UsageValue * 100.0 / LimitValue\n| where UsagePercent > 90\n| summarize AggregatedValue = toint(avg(UsagePercent)) by Computer",
        "nonRunningTeamNSQuery": "KubePodInventory\n | where ContainerStatus != \"running\"\n | where PodStatus != \"Succeeded\"\n | where ContainerStatusReason !in ('ImagePullBackOff', 'ErrImagePull', 'CreateContainerConfigError', 'CrashLoopBackOff', 'Error')\n | where PodCreationTimeStamp  < ago(10m) \n | where Namespace !in ('admin', 'kube-system', 'neuvector', 'kured')\n | distinct ControllerName, Namespace \n | order by Namespace",
        "nonRunningAdminNSQuery": "KubePodInventory\n | where ContainerStatus != \"running\"\n | where PodStatus != \"Succeeded\"\n | where ContainerStatusReason !in ('ImagePullBackOff', 'ErrImagePull', 'CreateContainerConfigError', 'CrashLoopBackOff', 'Error')\n | where PodCreationTimeStamp  < ago(10m) \n | where Namespace in ('admin', 'kube-system', 'neuvector', 'kured')\n | distinct ControllerName, Namespace \n | order by Namespace",
        "lowDiskQuery": "InsightsMetrics\n | where Origin == 'container.azm.ms/telegraf'\n | where Namespace == 'container.azm.ms/disk'\n | extend Tags = todynamic(Tags)\n | project TimeGenerated, ClusterId = Tags['container.azm.ms/clusterId'], Computer = tostring(Tags.hostName), DiskMetricName = Name, DiskMetricValue = Val\n | where DiskMetricName == 'used_percent'\n | summarize AggregatedValue = max(DiskMetricValue) by Computer\n | where AggregatedValue >= 90",
        "aksResourceId": "[resourceId('Microsoft.ContainerService/managedClusters/', parameters('aksName'))]",
        "actionGroupId": "[resourceId(parameters('infraResourceGroup'),'Microsoft.Insights/actiongroups/', parameters('actionGroupName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('aksName'), ' - ', 'Pods in unhealthy state')]",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[resourceGroup().location]",
            "tags" : {
                "EnvironmentName": "[parameters('environmentName')]",
                "Branch":"[parameters('branch')]",
                "managedBy":"[parameters('managedBy')]",
                "solutionOwner": "[parameters('solutionOwner')]",
                "activityName": "[parameters('activityName')]",
                "dataClassification":"[parameters('dataClassification')]",
                "automation": "[parameters('automation')]",
                "costCentre":"[parameters('costCentre')]",
                "environment": "[parameters('environment')]",
                "criticality": "[parameters('criticality')]"
             },
            "properties": {
                "description": "Pods that are unhealthy",
                "enabled": "[parameters('isEnabled')]",
                "source": {
                    "query": "[variables('unhealthyPodsQuery')]",
                    "dataSourceId": "[variables('aksResourceId')]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 5,
                    "timeWindowInMinutes": 5
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "1",
                    "aznsAction": {
                        "actionGroup": "[array(variables('actionGroupId'))]"
                    },
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 0
                    }
                }
            }
        },
        {
            "name": "[concat(parameters('aksName'), ' - ', 'Autoscaler adding instances')]",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[resourceGroup().location]",
            "tags" : {
                "EnvironmentName": "[parameters('environmentName')]",
                "Branch":"[parameters('branch')]",
                "managedBy":"[parameters('managedBy')]",
                "solutionOwner": "[parameters('solutionOwner')]",
                "activityName": "[parameters('activityName')]",
                "dataClassification":"[parameters('dataClassification')]",
                "automation": "[parameters('automation')]",
                "costCentre":"[parameters('costCentre')]",
                "environment": "[parameters('environment')]",
                "criticality": "[parameters('criticality')]"
             },
            "properties": {
                "description": "Number of scale up events in last 15 minutes.",
                "enabled": "[parameters('isEnabled')]",
                "source": {
                    "query": "[variables('autoscalarAddInstancesQuery')]",
                    "dataSourceId": "[variables('aksResourceId')]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 15,
                    "timeWindowInMinutes": 15
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "4",
                    "aznsAction": {
                        "actionGroup": "[array(variables('actionGroupId'))]"
                    },
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 0
                    }
                }
            }
        },
        {
            "name": "[concat(parameters('aksName'), ' - ', 'Autoscaler deleting Instance')]",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[resourceGroup().location]",
            "properties": {
                "description": "Number of deleted nodes in last 15 minutes.",
                "enabled": "[parameters('isEnabled')]",
                "source": {
                    "query": "[variables('autoscalarDeletingInstancesQuery')]",
                    "dataSourceId": "[variables('aksResourceId')]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 15,
                    "timeWindowInMinutes": 15
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "4",
                    "aznsAction": {
                        "actionGroup": "[array(variables('actionGroupId'))]"
                    },
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 0
                    }
                }
            }
        },
        {
            "name": "[concat(parameters('aksName'), ' - ', 'Nodes with high CPU usage')]",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[resourceGroup().location]",
            "tags" : {
                "EnvironmentName": "[parameters('environmentName')]",
                "Branch":"[parameters('branch')]",
                "managedBy":"[parameters('managedBy')]",
                "solutionOwner": "[parameters('solutionOwner')]",
                "activityName": "[parameters('activityName')]",
                "dataClassification":"[parameters('dataClassification')]",
                "automation": "[parameters('automation')]",
                "costCentre":"[parameters('costCentre')]",
                "environment": "[parameters('environment')]",
                "criticality": "[parameters('criticality')]"
              },
            "properties": {
                "description": "Nodes that are using over 95% of CPU for at least the last 6 hours.",
                "enabled": "[parameters('isEnabled')]",
                "source": {
                    "query": "[variables('highCPUQuery')]",
                    "dataSourceId": "[variables('aksResourceId')]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 360,
                    "timeWindowInMinutes": 360
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "2",
                    "aznsAction": {
                        "actionGroup": "[array(variables('actionGroupId'))]"
                    },
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 0
                    }
                }
            }
        },
        {
            "name": "[concat(parameters('aksName'), ' - ', 'Nodes with low memory')]",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[resourceGroup().location]",
            "tags" : {
                "EnvironmentName": "[parameters('environmentName')]",
                "Branch":"[parameters('branch')]",
                "managedBy":"[parameters('managedBy')]",
                "solutionOwner": "[parameters('solutionOwner')]",
                "activityName": "[parameters('activityName')]",
                "dataClassification":"[parameters('dataClassification')]",
                "automation": "[parameters('automation')]",
                "costCentre":"[parameters('costCentre')]",
                "environment": "[parameters('environment')]",
                "criticality": "[parameters('criticality')]"
              },
            "properties": {
                "description": "Nodes that have 10% or less RAM left for at least the last hour.",
                "enabled": "[parameters('isEnabled')]",
                "source": {
                    "query": "[variables('lowRAMQuery')]",
                    "dataSourceId": "[variables('aksResourceId')]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 360,
                    "timeWindowInMinutes": 360
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "2",
                    "aznsAction": {
                        "actionGroup": "[array(variables('actionGroupId'))]"
                    },
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 0
                    }
                }
            }
        },
        {
            "name": "[concat(parameters('aksName'), ' - ', 'Pods in not Running state (Pending, Failed, Unknown) in team namespace')]",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[resourceGroup().location]",
            "tags" : {
                "EnvironmentName": "[parameters('environmentName')]",
                "Branch":"[parameters('branch')]",
                "managedBy":"[parameters('managedBy')]",
                "solutionOwner": "[parameters('solutionOwner')]",
                "activityName": "[parameters('activityName')]",
                "dataClassification":"[parameters('dataClassification')]",
                "automation": "[parameters('automation')]",
                "costCentre":"[parameters('costCentre')]",
                "environment": "[parameters('environment')]",
                "criticality": "[parameters('criticality')]"
             },
            "properties": {
                "description": "Pods that are failing for at least 15 minutes with not running state (team namespace).",
                "enabled": "[parameters('isEnabled')]",
                "source": {
                    "query": "[variables('nonRunningTeamNSQuery')]",
                    "dataSourceId": "[variables('aksResourceId')]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 5,
                    "timeWindowInMinutes": 15
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "1",
                    "aznsAction": {
                        "actionGroup": "[array(variables('actionGroupId'))]"
                    },
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 0
                    }
                }
            }
        },
        {
            "name": "[concat(parameters('aksName'), ' - ', 'Pods in not Running state (Pending, Failed, Unknown) in (admin, kube-system, neuvector, kured) namespaces')]",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[resourceGroup().location]",
            "tags" : {
                "EnvironmentName": "[parameters('environmentName')]",
                "Branch":"[parameters('branch')]",
                "managedBy":"[parameters('managedBy')]",
                "solutionOwner": "[parameters('solutionOwner')]",
                "activityName": "[parameters('activityName')]",
                "dataClassification":"[parameters('dataClassification')]",
                "automation": "[parameters('automation')]",
                "costCentre":"[parameters('costCentre')]",
                "environment": "[parameters('environment')]",
                "criticality": "[parameters('criticality')]"
             },
            "properties": {
                "description": "Pods that are failing for at least 15 minutes with not running state in (admin, kube-system, neuvector, kured) namespaces).",
                "enabled": "[parameters('isEnabled')]",
                "source": {
                    "query": "[variables('nonRunningAdminNSQuery')]",
                    "dataSourceId": "[variables('aksResourceId')]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 5,
                    "timeWindowInMinutes": 15
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "0",
                    "aznsAction": {
                        "actionGroup": "[array(variables('actionGroupId'))]"
                    },
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 0
                    }
                }
            }
        },
        {
            "name": "[concat(parameters('aksName'), ' - ', 'Nodes with low free disk available')]",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[resourceGroup().location]",
            "tags" : {
                "EnvironmentName": "[parameters('environmentName')]",
                "Branch":"[parameters('branch')]",
                "managedBy":"[parameters('managedBy')]",
                "solutionOwner": "[parameters('solutionOwner')]",
                "activityName": "[parameters('activityName')]",
                "dataClassification":"[parameters('dataClassification')]",
                "automation": "[parameters('automation')]",
                "costCentre":"[parameters('costCentre')]",
                "environment": "[parameters('environment')]",
                "criticality": "[parameters('criticality')]"
              },
            "properties": {
                "description": "Nodes that have 10% or less free Disk left for in the last 15 minutes.",
                "enabled": "[parameters('isEnabled')]",
                "source": {
                    "query": "[variables('lowDiskQuery')]",
                    "dataSourceId": "[variables('aksResourceId')]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 5,
                    "timeWindowInMinutes": 15
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "2",
                    "aznsAction": {
                        "actionGroup": "[array(variables('actionGroupId'))]"
                    },
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 0
                    }
                }
            }
        }
    ]
}
