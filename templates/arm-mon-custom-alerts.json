{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "aksName": {
            "type": "string",
            "defaultValue": "myaksName",
            "metadata": {
                "description": "Name of target AKS cluster."
            }
        },
        "isEnabled": {
            "type": "string",
            "defaultValue": "true",
            "metadata": {
                "description": "Specifies whether the alert is enabled"
            }
        },
        "resourceId": {
            "type": "string",
            "defaultValue": "/subscriptions/a5453007-c32b-4336-9c79-3f643d817aea/resourceGroups/rpe-infra/providers/Microsoft.OperationalInsights/workspaces/rpe-infra",
            "metadata": {
                "description": "Resource ID of the resource emitting the metric that will be used for the comparison."
            }
        },
        "actionGroupId": {
            "type": "string",
            "defaultValue": "/subscriptions/a5453007-c32b-4336-9c79-3f643d817aea/resourceGroups/aks-rhollins-rg/providers/Microsoft.Insights/actionGroups/aks_action_group",
            "metadata": {
                "description": "The ID of the action group that is triggered when the alert is activated or deactivated"
            }
        }
    },
    "resources": [
        {
            "name": "[concat(parameters('aksName'), ' - ', 'Pods in unhealthy state')]",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[resourceGroup().location]",
            "properties": {
                "description": "Pods that are failing for at least 6 hours.",
                "enabled": "[parameters('isEnabled')]",
                "source": {
                    "query": "KubePodInventory | where ContainerStatusReason in ('ImagePullBackOff', 'ErrImagePull', 'CreateContainerConfigError', 'CrashLoopBackOff', 'Error', 'PodInitializing', 'ContainerCreating') and isnotnull(Name) and PodCreationTimeStamp < ago(6h) and TimeGenerated > ago(20min) | summarize count() by Name, Namespace, ClusterName, ContainerStatusReason, PodCreationTimeStamp, Computer | order by Namespace, ContainerStatusReason",
                    "dataSourceId": "[parameters('resourceId')]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 360,
                    "timeWindowInMinutes": 360
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "2",
                    "aznsAction": {
                        "actionGroup": "[array(parameters('actionGroupId'))]"
                    },
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 0
                    }
                }
            }
        },
        {
            "name": "[concat(parameters('aksName'), ' - ', 'Autoscaler adding instances')]",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[resourceGroup().location]",
            "properties": {
                "description": "Number of scale up events in last 15 minutes.",
                "enabled": "[parameters('isEnabled')]",
                "source": {
                    "query": "AzureDiagnostics | where Category == 'cluster-autoscaler' and TimeGenerated > ago(15m) and log_s matches regex 'Scale-up:' | order by TimeGenerated desc | project TimeGenerated, log_s",
                    "dataSourceId": "[parameters('resourceId')]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 15,
                    "timeWindowInMinutes": 15
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "4",
                    "aznsAction": {
                        "actionGroup": "[array(parameters('actionGroupId'))]"
                    },
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 0
                    }
                }
            }
        },
        {
            "name": "[concat(parameters('aksName'), ' - ', 'Autoscaler deleting Instance')]",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[resourceGroup().location]",
            "properties": {
                "description": "Number of deleted nodes in last 15 minutes.",
                "enabled": "[parameters('isEnabled')]",
                "source": {
                    "query": "AzureDiagnostics | where Category == 'cluster-autoscaler' and TimeGenerated > ago(15m) and log_s matches regex 'Deleting vmss instances' | order by TimeGenerated desc | project TimeGenerated, scale_set=extract(@'(virtualMachineScaleSets\\\/(.*?)\\\/)', 2, log_s, typeof(string)), aks_name=extract(@'(resourceGroups\\\/MC_)(.*?)(\\_)', 2, log_s, typeof(string))",
                    "dataSourceId": "[parameters('resourceId')]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 15,
                    "timeWindowInMinutes": 15
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "4",
                    "aznsAction": {
                        "actionGroup": "[array(parameters('actionGroupId'))]"
                    },
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 0
                    }
                }
            }
        },
        {
            "name": "[concat(parameters('aksName'), ' - ', 'Nodes with high CPU usage')]",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[resourceGroup().location]",
            "properties": {
                "description": "Nodes that are using over 95% of CPU for at least the last 6 hours.",
                "enabled": "[parameters('isEnabled')]",
                "source": {
                    "query": "let endDateTime = now(); let startDateTime = ago(6h); let trendBinSize = 1m; let capacityCounterName = 'cpuCapacityNanoCores'; let usageCounterName = 'cpuUsageNanoCores'; KubeNodeInventory | where TimeGenerated < endDateTime | where TimeGenerated >= startDateTime | distinct ClusterName, Computer | join hint.strategy=shuffle ( Perf | where TimeGenerated < endDateTime | where TimeGenerated >= startDateTime | where ObjectName == 'K8SNode' | where CounterName == capacityCounterName | summarize LimitValue = max(CounterValue) by Computer, CounterName, bin(TimeGenerated, trendBinSize) | project Computer, CapacityStartTime = TimeGenerated, CapacityEndTime = TimeGenerated + trendBinSize, LimitValue ) on Computer | join kind=inner hint.strategy=shuffle ( Perf | where TimeGenerated < endDateTime + trendBinSize | where TimeGenerated >= startDateTime - trendBinSize | where ObjectName == 'K8SNode' | where CounterName == usageCounterName | project Computer, UsageValue = CounterValue, TimeGenerated ) on Computer | where TimeGenerated >= CapacityStartTime and TimeGenerated < CapacityEndTime | project ClusterName, Computer, TimeGenerated, UsagePercent = UsageValue * 100.0 / LimitValue | where UsagePercent > 95 | summarize AggregatedValue = toint(avg(UsagePercent)) by Computer, ClusterName",
                    "dataSourceId": "[parameters('resourceId')]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 360,
                    "timeWindowInMinutes": 360
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "0",
                    "aznsAction": {
                        "actionGroup": "[array(parameters('actionGroupId'))]"
                    },
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 0
                    }
                }
            }
        },
        {
            "name": "[concat(parameters('aksName'), ' - ', 'Nodes with low memory')]",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[resourceGroup().location]",
            "properties": {
                "description": "Nodes that have 10% or less RAM left for at least the last hour.",
                "enabled": "[parameters('isEnabled')]",
                "source": {
                    "query": "let endDateTime = now(); let startDateTime = ago(1h); let trendBinSize = 1m; let capacityCounterName = 'memoryCapacityBytes'; let usageCounterName = 'memoryRssBytes'; KubeNodeInventory | where TimeGenerated < endDateTime | where TimeGenerated >= startDateTime | distinct ClusterName, Computer | join hint.strategy=shuffle ( Perf | where TimeGenerated < endDateTime | where TimeGenerated >= startDateTime | where ObjectName == 'K8SNode' | where CounterName == capacityCounterName | summarize LimitValue = max(CounterValue) by Computer, CounterName, bin(TimeGenerated, trendBinSize) | project Computer, CapacityStartTime = TimeGenerated, CapacityEndTime = TimeGenerated + trendBinSize, LimitValue ) on Computer | join kind=inner hint.strategy=shuffle ( Perf | where TimeGenerated < endDateTime + trendBinSize | where TimeGenerated >= startDateTime - trendBinSize | where ObjectName == 'K8SNode' | where CounterName == usageCounterName | project Computer, UsageValue = CounterValue, TimeGenerated ) on Computer | where TimeGenerated >= CapacityStartTime and TimeGenerated < CapacityEndTime | project ClusterName, Computer, TimeGenerated, UsagePercent = UsageValue * 100.0 / LimitValue | where UsagePercent > 90 | summarize AggregatedValue = toint(avg(UsagePercent)) by Computer, ClusterName",
                    "dataSourceId": "[parameters('resourceId')]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 360,
                    "timeWindowInMinutes": 360
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "0",
                    "aznsAction": {
                        "actionGroup": "[array(parameters('actionGroupId'))]"
                    },
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 0
                    }
                }
            }
        }
    ]
}